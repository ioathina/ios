/* definition of color palettes */
/* pseudo class selector which matches the html element to define 
our global variables or custom properties */
:root {
  /* variables names */
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  --color-headings: #1b0760;
  --color-body: #918ca4;
}
/* Typography */
/* font-size: 16px; is set by default by the browser
   62.5% of 16px = 10px = 1rem */
html {
  font-size: 62.5%;
}
/* colors and fonts for all text */
body {
  font-family: Inter, Arial, Helvetica, sans-serif;
  font-size: 2.4rem;
  /* distance between the lines */
  line-height: 1.5; /* 1.5 times the current font size */
  color: var(--color-body);
}
/* color only for the headings */
h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem; /* creates distance between the headings and the paragraphs */
}
/* 1 x font size of the html element */
h1 {
  font-size: 7rem;
}
h2 {
  font-size: 4rem;
}
h3 {
  font-size: 3rem;
}
p {
  margin-top: 0; /* the h3 headings define the margin above the paragraphs */
}
/* media query for screens that are larger than 1024px */
@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }
  h1 {
    font-size: 8rem;
  }
  h2 {
    font-size: 4rem;
  }
  h3 {
    font-size: 2.4rem;
  }
}

/* Links */
/* creates a rule for the link component */
a {
  text-decoration: none;
}
/* defines a class for the link component */
.link-arrow {
  color: var(--color-accent);
  font-size: 2rem;
  font-weight: bold;
  text-transform: uppercase;
}
/* use of the 'after' pseudo element selector */
.link-arrow::after {
  content: "-->"; /* we can also use an icon */
  margin-left: 5px; /* better use px to maintain a standard distance */
  transition: margin 0.15s; /* animates the 'margin' property */
}
/* goes to the 'hover' state and targets the 'after' element */
.link-arrow:hover::after {
  margin-left: 10px; /* we increase the left margin */
}
/* better do define a media query for every section seperately */
@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5rem;
  }
}

/* Badges */
/* we use 'Object Oriented' CSS principles: 
   we seperate structure from skin */
/* 1st rule that defines the structure */
.badge {
  border-radius: 20px; /* absolute px values that do not depend on the font size */
  font-size: 2rem;
  font-weight: bold;
  padding: 0.5rem 2rem; /* 0.5rem for horizontal and 2rem for vertical padding */
  white-space: nowrap; /* prevents the 'badge' of wrapping to a second line */
}
/* 2nd rule that defines the skin */
/* BEM Block Element Modifier '--' 
   seperates a block or a component: 'badge'
   from a modifier: 'primary' 
   so we can achieve multiple combinations in the index.html */
.badge--primary {
  background: var(--color-primary); /* to use our 'primary' color */
  color: #fff; /* text color: white */
}
.badge--secondary {
  background: var(--color-secondary); /* to use our 'secondary' color */
  color: #fff; /* text color: white */
}
/* we create secondary skin for the small badges */
.badge--small {
  font-size: 1.6rem;
}
@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }
  .badge--small {
    font-size: 1.2rem;
  }
}

/* Lists */
/* we use 'Object Oriented' CSS principles: 
   we seperate structure from skin */
/* define a 'list' class */
.list {
  list-style: none; /* to get rid of the default bullet point */
  padding-left: 0; /* to get rid of the padding that all browsers set by default */
  color: var(
    --color-headings
  ); /* they inherit the color we have set for the 'Headings' */
}
/* BEM Block Element Modifier '--' 
   seperates a block 'list' from its elements 'item'
   so we can achieve multiple combinations in the index.html */
/* creates an inline list variation */
/* we target items with the class of 'list__item' */
.list--inline .list__item {
  display: inline-block; /* with 'block' after 'inline' we are able to apply margins */
  margin-right: 2rem; /* to create distance between the items */
}
.list--tick {
  list-style-image: url(/images/tick.svg);
  padding-left: 3rem; /* the list by default pushes the icons out of the screen */
}
/* this is nesting */
.list--tick .list__item {
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}
@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0;
  }
}

/* Icons */
.icon {
  width: 40px;
  height: 40px;
}
/* BEM Block Element Modifier 'Object Oriented' principles */
/* we define seperate skins for these icons */
/* for the first one we want to use the 'primary' color */
.icon--primary {
  fill: var(--color-primary);
}
/* a single line '-' because here we create a completely new class no BEM */
.icon-container {
  background: #f3f9fa;
  width: 64px; /* we use absolute px values to maintain the same distance */
  height: 64px;
  border-radius: 100%;
  /* 'spans' are inline elements so we need to change their orientation. 
      we use 'inline-flex' because if we place it next to an other element
      they still need to stay in line  
      we use 'flex' to centralize the icon */
  display: inline-flex;
  /* aligns the item to the main axis which is by default the horizontal axis */
  justify-content: center;
  /* aligns the item to the secondary axis which is by default the vertical axis */
  align-items: center;
}
